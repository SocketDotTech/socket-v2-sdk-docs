"use strict";(self.webpackChunksocket_v2_sdk_docs=self.webpackChunksocket_v2_sdk_docs||[]).push([[7724],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),b=o,v=d["".concat(s,".").concat(b)]||d[b]||p[b]||a;return n?r.createElement(v,i(i({ref:t},u),{},{components:n})):r.createElement(v,i({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6255:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:4},s="Executing with Web3 Provider",l={unversionedId:"guides/web3-provider-execute",id:"guides/web3-provider-execute",title:"Executing with Web3 Provider",description:"The easiest way to execute routes using the Socket SDK is by connecting a web3 provider. Using this method, the SDK will handle the entire process of the transaction, including approvals, prompting wallets, switching networks and more.",source:"@site/docs/guides/web3-provider-execute.md",sourceDirName:"guides",slug:"/guides/web3-provider-execute",permalink:"/socket-v2-sdk-docs/guides/web3-provider-execute",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/web3-provider-execute.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Executing a route",permalink:"/socket-v2-sdk-docs/guides/execute-routes"},next:{title:"Continue a route",permalink:"/socket-v2-sdk-docs/guides/continue-route"}},u={},p=[{value:"Connecting",id:"connecting",level:2},{value:"Executing",id:"executing",level:2},{value:"Events",id:"events",level:2}],d={toc:p};function b(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"executing-with-web3-provider"},"Executing with Web3 Provider"),(0,a.kt)("p",null,"The easiest way to execute routes using the Socket SDK is by connecting a web3 provider. Using this method, the SDK will handle the entire process of the transaction, including approvals, prompting wallets, switching networks and more."),(0,a.kt)("p",null,"The SDK supports the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/providers/other/#Web3Provider"},"ethers Web3Provider"),". Many wallet libraries like ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WalletConnect/web3modal"},(0,a.kt)("inlineCode",{parentName:"a"},"web3modal"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.blocknative.com/onboard"},(0,a.kt)("inlineCode",{parentName:"a"},"web3onboard"))," support retrieving the web3 provider for the connected wallet."),(0,a.kt)("h2",{id:"connecting"},"Connecting"),(0,a.kt)("p",null,"Using the constructed socket instance, call ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," with the web3 provider. Web3Modal is being used as example here but any web3 provider can be used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const web3ModalProvider = await web3Modal.connect();\nconst web3Provider = new ethers.providers.Web3Provider(\n  web3ModalProvider,\n  "any"\n);\nconst socket = new Socket({ apiKey: API_KEY });\nconst web3Socket = socket.connect(web3Provider);\n')),(0,a.kt)("h2",{id:"executing"},"Executing"),(0,a.kt)("p",null,"To begin the execution simply call start:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const activeRouteId = await web3Socket.start(quote);\n")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("p",null,"In order to follow the execution process, you may specify ",(0,a.kt)("a",{parentName:"p",href:"/socket-v2-sdk-docs/reference/interfaces/EventCallbacks"},"EventCallbacks")," that will be called during the process."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'await web3Socket.start(quote, {\n  onDone: (activeRouteId) => {\n    console.log("Executing route complete", tx);\n  },\n});\n')),(0,a.kt)("p",null,"Most callbacks can also return a callback that will be called when the action has been completed. For example, you can detect when an approval transaction is complete:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'await web3Socket.start(quote, {\n  onApprove: (tx) => {\n    console.log("Requesting approval");\n    return (tx, hash) => {\n      console.log("Approval complete", hash);\n    };\n  },\n});\n')),(0,a.kt)("p",null,"For a complete list of callbacks see ",(0,a.kt)("a",{parentName:"p",href:"/socket-v2-sdk-docs/reference/interfaces/EventCallbacks"},"EventCallbacks"),"."))}b.isMDXComponent=!0}}]);